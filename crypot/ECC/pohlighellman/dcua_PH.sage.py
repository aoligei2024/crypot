
# This file was *autogenerated* from the file dcua_PH.sage
from sage.all_cmdline import *   # import sage library

_sage_const_84442469965344 = Integer(84442469965344); _sage_const_27543889954945113502256551007964501073506795938025836235838339960818915950890 = Integer(27543889954945113502256551007964501073506795938025836235838339960818915950890); _sage_const_75922969573987021583641685217441284832467954055295272505357185824478295962572 = Integer(75922969573987021583641685217441284832467954055295272505357185824478295962572); _sage_const_0 = Integer(0); _sage_const_88610873236405736097813831550942828314268128800347374801890968111325912062058 = Integer(88610873236405736097813831550942828314268128800347374801890968111325912062058); _sage_const_9 = Integer(9); _sage_const_512 = Integer(512); _sage_const_76792255969188554519144464321650537182337412449605253325780015124365585152539 = Integer(76792255969188554519144464321650537182337412449605253325780015124365585152539); _sage_const_10 = Integer(10); _sage_const_829 = Integer(829); _sage_const_108453893951105886914206677306984937223705600011149354906282902016584483568647 = Integer(108453893951105886914206677306984937223705600011149354906282902016584483568647); _sage_const_1 = Integer(1)
max_val = _sage_const_84442469965344 
M = _sage_const_108453893951105886914206677306984937223705600011149354906282902016584483568647 
# long weierstrass format
EE = EllipticCurve(GF(M),[_sage_const_0 ,_sage_const_829 ,_sage_const_0 ,_sage_const_512 ,_sage_const_0 ]) 
P = EE((_sage_const_88610873236405736097813831550942828314268128800347374801890968111325912062058 , _sage_const_76792255969188554519144464321650537182337412449605253325780015124365585152539 ))
# Q = Pn
Pn = EE((_sage_const_27543889954945113502256551007964501073506795938025836235838339960818915950890 , _sage_const_75922969573987021583641685217441284832467954055295272505357185824478295962572 ))
order = EE.order()
subresults = []
factors = []
modulus = _sage_const_1 
# Find partial solutions per each factor
for prime, exponent in factor(order):
        if prime > _sage_const_10 **_sage_const_9 :
                break
        _factor = prime ** exponent
        factors.append(_factor)
        P2 = P*(order//_factor)
        Pn2 = Pn*(order//_factor)
        subresults.append(discrete_log_lambda(Pn2, P2, (_sage_const_0 ,_factor), '+'))
        modulus *= _factor

# Join partial solutions
n = crt(subresults,factors)
while n < max_val:
        if P*n==Pn:
                print("n=%d"%n)
                break
        n+=modulus

