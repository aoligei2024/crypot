
# This file was *autogenerated* from the file pollardRho.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_10 = Integer(10); _sage_const_5 = Integer(5); _sage_const_123 = Integer(123); _sage_const_42139 = Integer(42139); _sage_const_23733 = Integer(23733); _sage_const_19964 = Integer(19964); _sage_const_38063 = Integer(38063); _sage_const_39516 = Integer(39516); _sage_const_17 = Integer(17); _sage_const_35834 = Integer(35834); _sage_const_55049 = Integer(55049)#!/usr/env sage
from IPython import embed
from gmpy2 import invert
def _pollardRho(EC, P, Q, p):
    """
    Solve elliptic curve log in Q = kP
    """
    order = EC.order()
    def calc_ab(A,a,b):
        """
        Search for S in the three sets based in x coordinate
        """
        if(int(A[_sage_const_0 ])%_sage_const_3  == _sage_const_0 ):
            b = (b+_sage_const_1 ) % order
            return (A+Q,a,b)
        if(int(A[_sage_const_0 ])%_sage_const_3  == _sage_const_1 ):
            a = a*_sage_const_2  % order
            b = b*_sage_const_2  % order
            return (_sage_const_2 *A,a,b)
        if(int(A[_sage_const_0 ])%_sage_const_3  == _sage_const_2 ):
            a = (a+_sage_const_1 ) % order
            return (A+P,a,b)

    x = P
    a,b = _sage_const_1 ,_sage_const_0
    X = P
    A,B = _sage_const_1 ,_sage_const_0
    i=_sage_const_1
    while(i<order):
        # Tortise - hop once
        x,a,b = calc_ab(x,a,b)
        # Hare - hot twice
        X,A,B = calc_ab(X,A,B)
        X,A,B = calc_ab(X,A,B)
        #print i,x,a,b,X,A,B
        if(x == X):
            print "Cycle found"
            break
        i+=_sage_const_1
    #embed()
    try:
        assert(gcd(B-b,order)==_sage_const_1 )
    except:
        print "try the second method"
        return None
    #print "<debug>", a,b,A,B,p
    secret = ( ((a-A)%order) * inverse_mod(B-b,order) ) % order
    #print "<debug> Secret:", secret
    return secret


def test():
    p = 52561L
    a,b = 16023L, 3038L
    EC = EllipticCurve(GF(p),[a,b])
    px, py = (_sage_const_23733 , _sage_const_39516 )
    P = EC((px,py))
    r = _sage_const_123
    Q = r*P

    _pollardRho(EC, P, Q, p)

def test2():
    p = _sage_const_55049
    a,b = (_sage_const_38063 , _sage_const_19964 )
    EC = EllipticCurve(GF(p),[a,b])
    px,py = (_sage_const_42139 ,_sage_const_35834 )
    P = EC((px,py))
    r = _sage_const_123
    Q = r*P

    _pollardRho(EC, P ,Q, p)

def test3():
    p = _sage_const_17
    a,b = _sage_const_2 ,_sage_const_2
    EC = EllipticCurve(GF(p),[a,b])
    P = EC((_sage_const_5 ,_sage_const_1 ))
    r = _sage_const_10
    Q = r*P

    _pollardRho(EC, P ,Q, p)


print test3()
embed()


