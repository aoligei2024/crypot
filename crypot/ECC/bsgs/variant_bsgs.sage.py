
# This file was *autogenerated* from the file variant_bsgs.sage
from sage.all_cmdline import *   # import sage library

_sage_const_22670 = Integer(22670); _sage_const_123 = Integer(123); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_29099 = Integer(29099); _sage_const_38330 = Integer(38330); _sage_const_591153005086204165523829267245014771 = Integer(591153005086204165523829267245014771); _sage_const_1234 = Integer(1234); _sage_const_238266381988261346751878607720968495 = Integer(238266381988261346751878607720968495); _sage_const_889774351128949770355298446172353873 = Integer(889774351128949770355298446172353873); _sage_const_67890 = Integer(67890); _sage_const_12345 = Integer(12345)#!/usr/env sage
from gmpy import invert
def _bsgs(EC,P,Q,p):
    """
    For P and Q points on the Curve EC, and follows the equation
    > Q = r * P
    find r using BSGS 
    """

    # limit
    k = int(ceil(sqrt(p-_sage_const_1 )))
    #baby step
    bs = list()
    for j in range(k-_sage_const_1 ):
        bs.append(k*j*P)
# check this sorting
    #bs.sort(key=lambda x: x[1])
    
    #giant step
    gs = list()
    for i in range(k-_sage_const_1 ):
        gs.append(Q - (i*(-P)))
# check this sorting too
    #gs.sort(key=lambda x: x[1])
    # find the intersection
    flag = _sage_const_0 
    for i in bs :
        if i in gs:
            I, J = bs.index(i), gs.index(i)
            flag = _sage_const_1 
            break
        if(flag): break

    return (k*J+I) % p

def test1():
    p = _sage_const_889774351128949770355298446172353873 
    a = _sage_const_12345 
    b = _sage_const_67890 

    EC = EllipticCurve(GF(p),[a,b])
    px, py = (_sage_const_238266381988261346751878607720968495 , _sage_const_591153005086204165523829267245014771 )
    P = EC((px,py))
    r = _sage_const_1234 
    Q = r*P

    assert(_bsgs(EC,P,Q,p) == r)

def test2():
    p = 38791L
    a,b = _sage_const_12345 , _sage_const_29099 
    EC = EllipticCurve(GF(p),[a,b])

    px,py = (_sage_const_22670 ,_sage_const_38330 )
    P = EC((px,py))
    r = _sage_const_123 
    Q = r*P

    print _bsgs(EC, P, Q, p)
    print "BSGS worked!"

print "Testing 2"
test2()

